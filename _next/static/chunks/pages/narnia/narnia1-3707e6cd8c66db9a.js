(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[755],{48021:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/narnia/narnia1",function(){return n(37103)}])},34655:function(e,t,n){"use strict";var i=n(85893),s=n(40335),o=n.n(s);t.Z=function(e){var t=e.src,n=e.alt,s=e.width,r=void 0===s?600:s;return(0,i.jsx)("div",{className:o().imgContainer,children:(0,i.jsx)("img",{src:"/over-the-wire"+t,alt:n,width:r})})}},90654:function(e,t,n){"use strict";var i=n(85893),s=n(23457),o=n.n(s),r=n(5227),a=n(84283);t.Z=function(e){var t=e.children,n=e.language;return(0,i.jsx)("div",{className:o().CodeBlock,children:(0,i.jsx)(r.Z,{language:n,style:a.cL,children:t})})}},69242:function(e,t,n){"use strict";var i=n(85893),s=n(41664),o=n(98574),r=n.n(o);t.Z=function(e){var t=e.link1,n=e.link2;return(0,i.jsxs)("div",{className:r().pageNav,children:[(0,i.jsx)("div",{children:t?(0,i.jsx)(s.default,{href:t,children:(0,i.jsx)("a",{title:"Previous page",className:r().navButton,children:"\u25c0"})}):""}),(0,i.jsx)("div",{children:n?(0,i.jsx)(s.default,{href:n,children:(0,i.jsx)("a",{title:"Next page",className:r().navButton,children:"\u25b6"})}):""})]})}},20586:function(e,t,n){"use strict";var i=n(85893),s=n(86655),o=n.n(s),r=n(5227),a=n(84283),l=n(67294);t.Z=function(e){var t=e.children,n=(0,l.useState)(!1),s=n[0],h=n[1];return(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Key"}),(0,i.jsxs)("div",{className:o().codeBlock,children:[(0,i.jsx)("div",{className:o().spoilerToggler,children:(0,i.jsx)("button",{onClick:function(){return h(!s)},children:"Click to Reveal"})}),(0,i.jsx)("div",{className:o().spoilerContainer,children:(0,i.jsx)("div",{className:"".concat(o().spoiler," ").concat(s?o().show:""),children:(0,i.jsx)(r.Z,{language:"",style:a.cL,customStyle:{margin:0},children:t})})})]})]})}},37103:function(e,t,n){"use strict";n.r(t);var i=n(85893),s=n(34655),o=n(90654),r=n(69242),a=n(20586);t.default=function(){return(0,i.jsxs)("div",{children:[(0,i.jsx)("h1",{children:"Narnia 1"}),(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Experience"}),(0,i.jsx)("p",{children:"Starting this level, we again start by looking at the source code."}),(0,i.jsx)(o.Z,{language:"c",children:'int main(){\nint (*ret)();\n\nif(getenv("EGG")==NULL){\n  printf("Give me something to execute at the env-variable EGG\n");\n  exit(1);\n}\n\nprintf("Trying to execute EGG!\n");\nret = getenv("EGG");\nret();\n\nreturn 0;\n}'}),(0,i.jsxs)("p",{children:["We may observe several interesting thing, first a declaration of a pointer called ",(0,i.jsx)("code",{children:"ret"})," which points to a function. There is also a usage of ",(0,i.jsx)("code",{children:"getenv"})," which gets an environment variable, which here seems to be called ",(0,i.jsx)("em",{children:"EGG"}),". It then sets the function pointer to whatever is inside the EGG environment varialbe and then executes it. So, clearly, we must insert some type of program into the EGG environment variable to obtain the password for Narnia 2."]}),(0,i.jsxs)("p",{children:["I could understand so far that we must set the environment variable to something executable, however, I did not know how to proceed. Searching setting environment variable vulnerabilities led to a ",(0,i.jsx)("a",{href:"https://owasp.org/www-community/attacks/Buffer_Overflow_via_Environment_Variables",children:"page in owasp.org"}),". This seem tangentially related, however, it uses environment variable to create a buffer overflow rather than creating an executable function. Lastly, I was forced to find hints regarding this level. I learnt that we were supposed to use something called shellcode."]}),(0,i.jsxs)("p",{children:["As the creation of shellcodes could be quite difficult especially in relation to removing null bytes, we can use a ready shellcode taken from websites such as ",(0,i.jsx)("a",{href:"http://shell-storm.org/shellcode/",children:"exploit-db"}),". If we analyse the code of narnia0, it calls ",(0,i.jsx)("code",{children:"execve"})," with ",(0,i.jsx)("code",{children:"/bin/sh"})," as arguments, so searching for a shellcode that does those, I found one from ",(0,i.jsx)("a",{href:"https://www.exploit-db.com/exploits/39160",children:"exploit-db"}),". It took several tries to find a working shellcode. We must then write this hex code to an environment variable without it being considered as merely a string, so we use the ",(0,i.jsx)("code",{children:"printf"})," shell function. Export the environment variable like so:"]}),(0,i.jsx)(o.Z,{language:"shell",children:'export EGG=$(printf "\\x6a\\x0b\\x58\\x31\\xf6\\x56\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\x89\\xca\\xcd\\x80")'}),(0,i.jsxs)("p",{children:["This will run the shell just like in Narnia 0, and we would just use ",(0,i.jsx)("code",{children:"cat"})," to obtain the password for Narnia2."]})]}),(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Research"}),(0,i.jsx)("p",{children:"What is shellcode? Shellcode is just a general term for an injected payload that will be executed by a target program. The term shellcode does not mean it is related to shell commands. The term came from its background as a payload to create a shell for the attacker to utilise. In relation to the shellcode shown, each hex number represents an assembly operation. A good understanding could be earned if we consider a small C code. For example, a small program printing hello world."}),(0,i.jsx)(o.Z,{language:"c",children:'#include <stdio.h>\n\nint main(void) {\n  printf("Hello world");\n  return 0;\n}'}),(0,i.jsxs)("p",{children:["When this is compiled, we can see the hex representation of all the assembly instructions using ",(0,i.jsx)("code",{children:"objdump"}),". It is located at the centre, as seen in the picture below."]}),(0,i.jsx)(s.Z,{src:"/images/narnia1-1.png",alt:"the hex representation of assembly instruction located at the centre of the objdump result"}),(0,i.jsxs)("p",{children:["These are the operation codes to run the program of printing hello world. The main problem with this is that, the usage of null bytes in a string could terminate the string, this is undesirable product.Therefore, normally, these opcode shellcodes are written directly using assembly or at least edited to avoid operations with null bytes. It is also possible to find shellcodes already made by others, namely, in the website ",(0,i.jsx)("a",{href:"http://shell-storm.org/shellcode/",children:" shell-storm"}),". To read more about shellcode, I would recommend reading about them in this, ",(0,i.jsx)("a",{href:"https://www.exploit-db.com/docs/english/13019-shell-code-for-beginners.pdf",children:"document written by exploit-db.com"})]}),(0,i.jsx)("p",{children:"Another thing to consider was that since these shellcodes utilises hex representation of operation codes, it is limited to the specific infrastructure that uses the same operation codes."})]}),(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Reflection"}),(0,i.jsx)("p",{children:"This was quite a difficult CTF level, but I've learnt a few things that I had not known before. Namely that we may insert what seems to be just a string of hex, when instead it is an fully executable program. That was quite interesting to see. When doing buffer overflow attack, it at first seem limited to what we can do. However, seeing how it is possible to write assembly instructions, it reveals to me what a buffer overflow attack can fully accomplish. This made me reconsider how I should perceive potential overflow problems."}),(0,i.jsx)("p",{children:"In terms of completing the challenge, I did feel that I may have taken too long in trying to figure out what I should insert in the environment variable. While I still feel that requiring hints was a little dissapointing, at the end I was able to find my own shellcode and assign it to the environment variable with my own understanding of what I'm trying to accomplish and how everything should work."})]}),(0,i.jsx)(a.Z,{children:"nairiepecu"}),(0,i.jsx)(r.Z,{link1:"/narnia/narnia0",link2:"/narnia/narnia2"})]})}},40335:function(e){e.exports={imgContainer:"BlogImage_imgContainer__s2tL6"}},23457:function(e){e.exports={CodeBlock:"CodeBlock_CodeBlock___IBBd"}},98574:function(e){e.exports={pageNav:"PageNav_pageNav__NXqbT",navButton:"PageNav_navButton__yHhmO"}},86655:function(e){e.exports={codeBlock:"SpoilerKey_codeBlock__KWl0d",spoilerToggler:"SpoilerKey_spoilerToggler__HCeWZ",spoiler:"SpoilerKey_spoiler__YWx_s",show:"SpoilerKey_show__VIJ75",spoilerContainer:"SpoilerKey_spoilerContainer__O76It"}}},function(e){e.O(0,[369,774,888,179],(function(){return t=48021,e(e.s=t);var t}));var t=e.O();_N_E=t}]);