(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[995],{1444:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/natas/natas12",function(){return n(44174)}])},34655:function(e,t,n){"use strict";var i=n(85893),a=n(40335),o=n.n(a);t.Z=function(e){var t=e.src,n=e.alt,a=e.width,s=void 0===a?600:a;return(0,i.jsx)("div",{className:o().imgContainer,children:(0,i.jsx)("img",{src:"/over-the-wire"+t,alt:n,width:s})})}},90654:function(e,t,n){"use strict";var i=n(85893),a=n(23457),o=n.n(a),s=n(5227),l=n(84283);t.Z=function(e){var t=e.children,n=e.language;return(0,i.jsx)("div",{className:o().CodeBlock,children:(0,i.jsx)(s.Z,{language:n,style:l.cL,children:t})})}},87582:function(e,t,n){"use strict";var i=n(85893),a=n(76992),o=n.n(a);t.Z=function(e){var t=e.children;return(0,i.jsxs)("div",{className:o().keyword,children:[(0,i.jsx)("p",{className:o().keywordHead,children:"Keywords: "}),t]})}},69242:function(e,t,n){"use strict";var i=n(85893),a=n(41664),o=n(98574),s=n.n(o);t.Z=function(e){var t=e.link1,n=e.link2;return(0,i.jsxs)("div",{className:s().pageNav,children:[(0,i.jsx)("div",{children:t?(0,i.jsx)(a.default,{href:t,children:(0,i.jsx)("a",{title:"Previous page",className:s().navButton,children:"\u25c0"})}):""}),(0,i.jsx)("div",{children:n?(0,i.jsx)(a.default,{href:n,children:(0,i.jsx)("a",{title:"Next page",className:s().navButton,children:"\u25b6"})}):""})]})}},20586:function(e,t,n){"use strict";var i=n(85893),a=n(86655),o=n.n(a),s=n(5227),l=n(84283),r=n(67294);t.Z=function(e){var t=e.children,n=(0,r.useState)(!1),a=n[0],h=n[1];return(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Key"}),(0,i.jsxs)("div",{className:o().codeBlock,children:[(0,i.jsx)("div",{className:o().spoilerToggler,children:(0,i.jsx)("button",{onClick:function(){return h(!a)},children:"Click to Reveal"})}),(0,i.jsx)("div",{className:o().spoilerContainer,children:(0,i.jsx)("div",{className:"".concat(o().spoiler," ").concat(a?o().show:""),children:(0,i.jsx)(s.Z,{language:"",style:l.cL,customStyle:{margin:0},children:t})})})]})]})}},35934:function(e,t,n){"use strict";var i=n(85893),a=n(96979),o=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}t.Z=function(e){var t=e.children,n=l(e,["children"]);return(0,i.jsx)("span",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"===typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){s(e,t,n[t])}))}return e}({className:o().tag},n,{children:t}))}},44174:function(e,t,n){"use strict";n.r(t);var i=n(85893),a=n(34655),o=n(90654),s=n(87582),l=n(69242),r=n(20586),h=n(35934);t.default=function(){return(0,i.jsxs)("div",{children:[(0,i.jsx)("h1",{children:"Natas 12"}),(0,i.jsx)(s.Z,{children:(0,i.jsx)(h.Z,{children:"file-upload"})}),(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Experience"}),(0,i.jsx)("p",{children:"For my first impression, nothing really seem out of the ordinary in the source file. No execution of shell commands, no obvious variable storing the password, it seems to do what it is supposed to do. So, considering that the level asks to upload a file, it must then be the uploading of a file that is the vulnerability. The question is, what could we upload to obtain the password?"}),(0,i.jsx)(a.Z,{src:"/images/natas12-1.png",alt:"The challenge page consists of a prompt asking for choosing a jpeg file to upload and the upload button"}),(0,i.jsxs)("p",{children:["The tutorial by ",(0,i.jsx)("a",{href:"https://www.hacksplaining.com/exercises/file-upload#/start",children:"hacksplaining"})," showed in general the process of uploading malicious code, essentially, if the file upload is unrestricted, we will be able to run the code by simply going to the url to that file."]}),(0,i.jsx)(o.Z,{language:"php",children:'<?\nfunction makeRandomPath($dir, $ext) {\n    do {\n    $path = $dir."/".genRandomString().".".$ext;\n    } while(file_exists($path));\n    return $path;\n}\n\nfunction makeRandomPathFromFilename($dir, $fn) {\n    $ext = pathinfo($fn, PATHINFO_EXTENSION);\n    return makeRandomPath($dir, $ext);\n}\n\nif(array_key_exists("filename", $_POST)) {\n    $target_path = makeRandomPathFromFilename("upload", $_POST["filename"]);\n\n\n        if(filesize($_FILES[\'uploadedfile\'][\'tmp_name\']) > 1000) {\n        echo "File is too big";\n    } else {\n        if(move_uploaded_file($_FILES[\'uploadedfile\'][\'tmp_name\'], $target_path)) {\n            echo "The file <a href="$target_path">$target_path</a> has been uploaded";\n        } else{\n            echo "There was an error uploading the file, please try again!";\n        }\n    }\n} else {\n?>\n\n<form enctype="multipart/form-data" action="index.php" method="POST">\n<input type="hidden" name="MAX_FILE_SIZE" value="1000" />\n<input type="hidden" name="filename" value="<? print genRandomString(); ?>.jpg" />\nChoose a JPEG to upload (max 1KB):<br/>\n<input name="uploadedfile" type="file" /><br />\n<input type="submit" value="Upload File" />'}),(0,i.jsxs)("p",{children:["The above snippet of code highlights the main parts important for us. We note that there is a hidden input component named ",(0,i.jsx)("em",{children:"filename"}),"that will get a random string followed by a jpg extension which will be then used by the server as the name of the uploaded file. To execute the file we upload, we must ensure that it keeps the original extension. But firstly what should the uploaded malicious code do? We simply need to obtain the password inside ",(0,i.jsx)("code",{children:"/etc/natas_webpass/natas13"}),", so what we need is to use a shell command, specifically ",(0,i.jsx)("code",{children:"cat"}),"."]}),(0,i.jsx)(o.Z,{language:"php",children:'<?php system("cat /etc/natas_webpass/natas13");?>'}),(0,i.jsx)("p",{children:'We then upload that file. Now, to go around the file extension was actually surprisingly simple, the "hidden" filename value is available to us through the developer tool. Therefore, we could simply change the value.'}),(0,i.jsx)(a.Z,{src:"/images/natas12-2.png",alt:"page source code after the filename extension was changed to .php"}),(0,i.jsxs)("p",{children:["Now notice from the source code of the page that when filename exist, it will call the ",(0,i.jsx)("code",{children:"makeRandomPathFromFilename"})," function. This will change the name of the file from the value of filename, however it keeps the extension of that value. The only other thing preventing an invalid image is the filesize. With a single line php code, this shouldn't be a problem. Now with everything done, we then upload the file."]}),(0,i.jsx)(a.Z,{src:"/images/natas12-3.png",alt:"resulting page when the file is uploaded"}),(0,i.jsx)("p",{children:"As we see, the php file is kept, and we simply append that path to the url or in this case, we can simply click on the link they have conveniently given us. Like that we will get the password for natas13."})]}),(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Research"}),(0,i.jsxs)("p",{children:["Owasp has a good ",(0,i.jsx)("a",{href:"https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload",children:"entry regarding unrestricted file upload"}),". A potential risk, I didn't think about was overwriting critical files using relative paths, potentially changing files such as index.php itself, this would allow the attacker to modify the website for everyone else, creating a phising page. File uploads is a common method of Cross Site Scripting attacks that effect every user who subsequently visit the website. But in general, with high enough authorisation, it could run arbitrary shell command with limitless possibility, e.g. exploring the file directory of the server, execute a malware, obtain user data, etc."]}),(0,i.jsx)("p",{children:"The same Owasp webpage also lists several potential file upload vulnerability practices. An example was to check the file extension, this could be vulnerable to perhaps double extensions. Or, there could be a flaw in the function replacing the dangerous extension. Or, an attacker could use neutral characters after a filename, so that it doesn't end in the forbidden extension."}),(0,i.jsx)("p",{children:"There are several potential solutions that could be use to make file uploading functionality more secure and are better used in combination. One prevention method could be to not allow users direct access to the filename and extension of the file when it will be saved on the server, so in this scenario, it should have changed the extension during the uploading process, rather than using a hidden form input element. Limiting the filename was also listed as this would make it more difficult to fool name checking functions. Removing control characters in filename, including its unicode representation. Restrict permission on the directory that stores the uploaded files."})]}),(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Reflection"}),(0,i.jsx)("p",{children:"This was a really fun challenge and a good introduction to how file uploads could be used by attackers. Uploading files could be dangerous as it will store user input inside the server which may be executable. This could then be used in file inclusion attacks we have seen previously, XSS, or we could simply run any commands we would like. There isn't really a limit once we are able to execute arbitrary commands on a computer."}),(0,i.jsx)("p",{children:"Therefore, this level really reminded me to be careful when not only taking user inputs in form of text but also in form of files themselves. This functionality is often used in many websites, for example for the purpose of adding a profile picture, but in turns out that something this simple and widely done also have a very huge potential for being exploited. I guess it's a reminder to be ever vigilant about the code we write."}),(0,i.jsx)("p",{})]}),(0,i.jsx)(r.Z,{children:"jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY"}),(0,i.jsx)(l.Z,{link1:"natas11",link2:"natas13"})]})}},40335:function(e){e.exports={imgContainer:"BlogImage_imgContainer__s2tL6"}},23457:function(e){e.exports={CodeBlock:"CodeBlock_CodeBlock___IBBd"}},76992:function(e){e.exports={keywordHead:"Keyword_keywordHead__40fuD",keyword:"Keyword_keyword__javqt"}},98574:function(e){e.exports={pageNav:"PageNav_pageNav__NXqbT",navButton:"PageNav_navButton__yHhmO"}},86655:function(e){e.exports={codeBlock:"SpoilerKey_codeBlock__KWl0d",spoilerToggler:"SpoilerKey_spoilerToggler__HCeWZ",spoiler:"SpoilerKey_spoiler__YWx_s",show:"SpoilerKey_show__VIJ75",spoilerContainer:"SpoilerKey_spoilerContainer__O76It"}},96979:function(e){e.exports={tag:"Tag_tag__AJnTY"}}},function(e){e.O(0,[369,774,888,179],(function(){return t=1444,e(e.s=t);var t}));var t=e.O();_N_E=t}]);