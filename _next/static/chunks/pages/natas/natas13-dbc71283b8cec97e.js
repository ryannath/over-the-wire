(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[615],{39657:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/natas/natas13",function(){return n(31062)}])},90654:function(e,t,n){"use strict";var i=n(85893),o=n(23457),a=n.n(o),r=n(5227),s=n(84283);t.Z=function(e){var t=e.children,n=e.language;return(0,i.jsx)("div",{className:a().CodeBlock,children:(0,i.jsx)(r.Z,{language:n,style:s.cL,children:t})})}},87582:function(e,t,n){"use strict";var i=n(85893),o=n(76992),a=n.n(o);t.Z=function(e){var t=e.children;return(0,i.jsxs)("div",{className:a().keyword,children:[(0,i.jsx)("p",{className:a().keywordHead,children:"Keywords: "}),t]})}},69242:function(e,t,n){"use strict";var i=n(85893),o=n(41664),a=n(98574),r=n.n(a);t.Z=function(e){var t=e.link1,n=e.link2;return(0,i.jsxs)("div",{className:r().pageNav,children:[(0,i.jsx)("div",{children:t?(0,i.jsx)(o.default,{href:t,children:(0,i.jsx)("a",{title:"Previous page",className:r().navButton,children:"\u25c0"})}):""}),(0,i.jsx)("div",{children:n?(0,i.jsx)(o.default,{href:n,children:(0,i.jsx)("a",{title:"Next page",className:r().navButton,children:"\u25b6"})}):""})]})}},20586:function(e,t,n){"use strict";var i=n(85893),o=n(86655),a=n.n(o),r=n(5227),s=n(84283),l=n(67294);t.Z=function(e){var t=e.children,n=(0,l.useState)(!1),o=n[0],c=n[1];return(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Key"}),(0,i.jsxs)("div",{className:a().codeBlock,children:[(0,i.jsx)("div",{className:a().spoilerToggler,children:(0,i.jsx)("button",{onClick:function(){return c(!o)},children:"Click to Reveal"})}),(0,i.jsx)("div",{className:a().spoilerContainer,children:(0,i.jsx)("div",{className:"".concat(a().spoiler," ").concat(o?a().show:""),children:(0,i.jsx)(r.Z,{language:"",style:s.cL,customStyle:{margin:0},children:t})})})]})]})}},35934:function(e,t,n){"use strict";var i=n(85893),o=n(96979),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}t.Z=function(e){var t=e.children,n=s(e,["children"]);return(0,i.jsx)("span",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"===typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){r(e,t,n[t])}))}return e}({className:a().tag},n,{children:t}))}},31062:function(e,t,n){"use strict";n.r(t);var i=n(85893),o=n(90654),a=n(87582),r=n(69242),s=n(20586),l=n(35934);t.default=function(){return(0,i.jsxs)("div",{children:[(0,i.jsx)("h1",{children:"Natas 13"}),(0,i.jsxs)(a.Z,{children:[(0,i.jsx)(l.Z,{children:"file-upload"}),(0,i.jsx)(l.Z,{children:"documentation"}),(0,i.jsx)(l.Z,{children:"magic-number"})]}),(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Experience"}),(0,i.jsx)("p",{children:"This is quite similar to the previous level, with the main difference being that it's supposed to check what type of file has been uploaded. So the main question I asked was, how would it know?"}),(0,i.jsx)(o.Z,{language:"php",children:"} else if (! exif_imagetype($_FILES['uploadedfile']['tmp_name'])) {\n        echo \"File is not an image\";"}),(0,i.jsxs)("p",{children:["the above code is a snippet of the source code available and it shows the usage of ",(0,i.jsx)("code",{children:"exif_imagetypes"}),". Reading the ",(0,i.jsx)("a",{href:"https://www.php.net/manual/en/function.exif-imagetype.php",children:"php manual"})," regarding this function, it appears to simply check the first couple of bytes, that is the ",(0,i.jsx)("em",{children:"magic number"})," of the file. Magic numbers are essentially unique signatures that indicates what type a file is. This is not meant to be used for thorough checking of the actual type of file. This mirrors how may mistakenly think a ",(0,i.jsx)("code",{children:"robots.txt"})," will prevent web crawlers from accessing a page, when in reality, they are there as standards which malicious attackers do not need to follow."]}),(0,i.jsxs)("p",{children:["Simple enough, I used the same file as before, however I added the appropriate .jpg magic numbers to the start of the file, that is ",(0,i.jsx)("code",{children:"FF D8 FF"}),". To do so, I used the program ",(0,i.jsx)("a",{href:"https://mh-nexus.de/en/hxd/",children:"HxD"})," which allowed me to modify the code's hex representation. To add bytes to the file using HxD, we need to be on insert mode, otherwise, it will only rewrite existing bytes."]}),(0,i.jsx)("p",{children:"The rest of the procedure is the same as with Natas 12, select the php file to upload, change the extension using developer tools, upload, then go to the url."})]}),(0,i.jsxs)("section",{children:[(0,i.jsx)("h2",{children:"Reflection"}),(0,i.jsxs)("p",{children:["This is perhaps a common mistake new developers may employ to prevent full unrestricted file uploads. One could imagine that without a good knowledge of how ",(0,i.jsx)("code",{children:"exif_imagetypes"})," actually checks the file type, a developer may think it is an already implemented function that can check thoroughly the type of file uploaded. When instead, it relies on a easy to replicate meta data header in the form of some magic numbers. This again emphasise the importance of knowing how functions we call work especially when handling potentially security risking areas of a program. The documentation would have been clear that it does not thoroughly check the whole file, only the first couple of bytes."]}),(0,i.jsx)("p",{children:"I could also take this as an indicator that teaching common vulnerabilities to junior developers should be a major priority especially if they are writing programs that interface with users. An important distionction must also be made about what type of things are standard but not necessarily true, e.g. that the magic number will match the actual type of the file."})]}),(0,i.jsx)(s.Z,{children:"Lg96M10TdfaPyVBkJdjymbllQ5L6qdl1"}),(0,i.jsx)(r.Z,{link1:"natas12",link2:"natas14"})]})}},23457:function(e){e.exports={CodeBlock:"CodeBlock_CodeBlock___IBBd"}},76992:function(e){e.exports={keywordHead:"Keyword_keywordHead__40fuD",keyword:"Keyword_keyword__javqt"}},98574:function(e){e.exports={pageNav:"PageNav_pageNav__NXqbT",navButton:"PageNav_navButton__yHhmO"}},86655:function(e){e.exports={codeBlock:"SpoilerKey_codeBlock__KWl0d",spoilerToggler:"SpoilerKey_spoilerToggler__HCeWZ",spoiler:"SpoilerKey_spoiler__YWx_s",show:"SpoilerKey_show__VIJ75",spoilerContainer:"SpoilerKey_spoilerContainer__O76It"}},96979:function(e){e.exports={tag:"Tag_tag__AJnTY"}}},function(e){e.O(0,[369,774,888,179],(function(){return t=39657,e(e.s=t);var t}));var t=e.O();_N_E=t}]);